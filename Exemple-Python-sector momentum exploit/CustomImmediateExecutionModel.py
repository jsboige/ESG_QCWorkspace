# region imports
from AlgorithmImports import *
class CustomImmediateExecutionModel(ImmediateExecutionModel):
    def __init__(self, leverage=2.0):
        self.leverage = leverage

    def Execute(self, algorithm, targets):
        leverage = self.leverage  # Assuming leverage of 2, adjust as needed

        for target in targets:
            if target.Symbol in algorithm.Portfolio:
                holding = algorithm.Portfolio[target.Symbol].Quantity
            else:
                holding = 0

            # Calculate the target quantity with leverage
            target_quantity = target.Quantity * leverage

            # Calculate the difference between target quantity and current holding
            adjustment = target_quantity - holding

            if target_quantity == 0:
                algorithm.Liquidate(target.Symbol, tag="Liquidate")
            elif adjustment > 0:
                if holding == 0:
                    tag = "new position"
                else:
                    tag = "Upsizing position"
                algorithm.MarketOrder(target.Symbol, adjustment, tag=tag)
            elif adjustment < 0:
                tag = "downsizing position"
                algorithm.MarketOrder(target.Symbol, adjustment, tag=tag)




